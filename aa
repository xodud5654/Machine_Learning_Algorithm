import pandas as pd

X=pd.read_csv("./h_t/value.csv",header=None)
y=pd.read_csv("./h_t/target.csv",header=None)

## 2. data preprocessing: abnormal data check (NaN, outlier check!!!)

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
y = le.fit_transform(y)


## 3. train / validation / test data split
from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = \
            train_test_split(X,y,random_state=42,test_size=0.2,stratify=y)
            


## 4. data preprocessing
# from sklearn.preprocessing import StandardScaler
# ss = StandardScaler()
# ss.fit(X_train)
# X_train_std = ss.transform(X_train)
# X_test_std = ss.transform(X_test)




## 5. algorithm training
from xgboost import XGBClassifier
from sklearn.model_selection import GridSearchCV

xgb = XGBClassifier(tree_method='hist', random_state=42)



n_estimators=[100,300,500,900,1000]
max_depth=[1,3,5,7]
learning_rate = [0.01, 0.1, 0.5]
          
xgb_grid_cv = GridSearchCV(estimator = xgb,
                       param_grid = [{'n_neighbors': n_estimators,
                                      'max_depth':max_depth,
                                      'learning rate': learning_rate }],
                       n_jobs=-1)






xgb_grid_cv.fit(X_train, y_train)
xgb_bestModel = xgb_grid_cv.best_estimator_


print('best validation score: %.3f' %xgb_grid_cv.best_score_)
print(xgb_grid_cv.best_params_)


xgb_train_score = xgb_grid_cv.score(X_train, y_train)
xgb_test_score = xgb_grid_cv.score(X_test, y_test)

print('XGBoost 훈련 정확도/테스트 정확도 %.3f/%.3f' % (xgb_train_score, xgb_test_score))
